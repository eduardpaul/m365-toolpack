FROM mcr.microsoft.com/devcontainers/base:ubuntu-22.04 AS base

RUN apt update && apt upgrade -y

ENV NODE_VERSION 18.20.4
ENV NVM_DIR /usr/local/nvm
ENV DOTNET_ROOT /usr/share/dotnet

# wsl specific
RUN echo '\n\n\
[user]\n\
default=vscode\n' | tee -a /etc/wsl.conf
RUN apt install software-properties-common -y && add-apt-repository ppa:wslutilities/wslu
RUN apt update && apt-get install keychain gawk libsigsegv2 wslu -y

# install microsoft feed (pwsh and dotnet)
RUN wget -q https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb
RUN dpkg -i packages-microsoft-prod.deb && rm packages-microsoft-prod.deb

# Update distro
RUN apt update && apt upgrade -y
RUN apt install -y powershell

RUN touch /etc/apt/preferences
RUN echo '\
Package: dotnet* aspnet* netstandard*\
Pin: origin "packages.microsoft.com"\
Pin-Priority: -10\'
    
RUN pwsh -c Install-Module -Name Microsoft.Graph -Scope AllUsers -Repository PSGallery -Force
RUN pwsh -c Install-Module -Name Az -Scope AllUsers -Repository PSGallery -Force
RUN pwsh -c Install-Module -Name PnP.PowerShell -Scope AllUsers -Repository PSGallery -Force
RUN pwsh -c Install-Module -Name MicrosoftTeams -Scope AllUsers -Repository PSGallery -Force
RUN pwsh -c Install-Module -Name ExchangeOnlineManagement -Scope AllUsers -Repository PSGallery -Force


RUN curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin -c 6.0 --install-dir ${DOTNET_ROOT}
RUN curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin -c 7.0 --install-dir ${DOTNET_ROOT}
RUN curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin -c 8.0 --install-dir ${DOTNET_ROOT}
RUN /usr/share/dotnet/dotnet tool install --tool-path ${DOTNET_ROOT}/tools Microsoft.PowerApps.CLI.Tool 
RUN /usr/share/dotnet/dotnet tool install --tool-path ${DOTNET_ROOT}/tools dotnet-svcutil

RUN curl -sL https://aka.ms/InstallAzureCLIDeb | bash

# Install node using NVM Azure Function Tools V4 M365 CLI SPFx 18 global packages
RUN mkdir -p ${NVM_DIR}
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash \
    && . ${NVM_DIR}/nvm.sh \
    && nvm install $NODE_VERSION \
    && nvm alias default $NODE_VERSION \
    && nvm use default \
    && npm i -g azure-functions-core-tools@4 @pnp/cli-microsoft365 gulp-cli yo@5 @microsoft/generator-sharepoint@1.18.2 --unsafe-perm true

#
RUN chmod -R 777 ${NVM_DIR} 

RUN echo '\n\n\
export NVM_DIR='${NVM_DIR}'\n'\
'export NODE_VERSION='${NODE_VERSION}'\n \
[ -s "'$NVM_DIR'/nvm.sh" ] && \. "'$NVM_DIR'/nvm.sh"\n\
export NODE_PATH=$NVM_DIR/versions/node/v$NODE_VERSION/lib/node_modules\n\
export DOTNET_ROOT='${DOTNET_ROOT}'\n\
export PATH=$DOTNET_ROOT:$DOTNET_ROOT/tools:$NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH \n\
export NODE_OPTIONS="--max-old-space-size=8192"' | tee -a /root/.bashrc /home/vscode/.bashrc

USER vscode

RUN curl -sL https://aka.ms/DevTunnelCliInstall | bash

RUN mkdir /home/vscode/.ssh
RUN echo '\n\n\
eval `ssh-agent -s`\n\
eval `keychain --eval id_rsa`' | tee -a /home/vscode/.bashrc

ENTRYPOINT [ "/bin/bash", "-l", "-c" ]

# docker build & export: 

# docker build --rm -t eduardpaul/m365-toolpack:wsl-ubuntu-22.04-node-18-net-8 .
# docker run --name wsl-ubuntu-22.04-node-18-net-8 eduardpaul/m365-toolpack:wsl-ubuntu-22.04-node-18-net-8
# docker export --output=wsl-ubuntu-22.04-node-18-net-8.tar wsl-ubuntu-22.04-node-18-net-8
# wsl --import wsl-ubuntu-22.04-node-18-net-8 "C:\wsldisks\wsl-ubuntu-22.04-node-18-net-8" ".\wsl-ubuntu-22.04-node-18-net-8.tar" --version 2

# utilities
# fix key issues: chmod 600 ~/.ssh/id_rsa; chmod 600 ~/.ssh/id_rsa.pub
# fix token time issues: sudo hwclock -s

# powershell to install pfx files:

# $storeName = [System.Enum]::Parse([System.Security.Cryptography.X509Certificates.StoreName], "My", $true)
# $storeLocation = [System.Enum]::Parse([System.Security.Cryptography.X509Certificates.StoreLocation], "CurrentUser", $true)
# $path = "./cert.pfx"
# $password = ""
# 
# Write-Host "Installing certificate from '$path' to '$storeName' certificate store (location: $storeLocation)..."
# $cert = $null
# if ([string]::IsNullOrEmpty($password)) {
#     $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($path)
# }
# else {
#     $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($path, $password, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
# }
# if ($null -eq $cert) {
#     throw [System.ArgumentNullException]::new("Unable to create certificate from provided arguments.")
# }
# $store = New-Object System.Security.Cryptography.X509Certificates.X509Store($storeName, $storeLocation)
# $store.Open("ReadWrite")
# $store.Add($cert)
# $certificates = $store.Certificates.Find("FindByThumbprint", $cert.Thumbprint, $false)
# if ($certificates.Count -le 0) {
#     throw [System.ArgumentNullException]::new("Unable to validate certificate was added to store.")
# }
# Write-Host "Done."
# $store.Close()
